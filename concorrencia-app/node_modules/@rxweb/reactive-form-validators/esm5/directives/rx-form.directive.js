import * as tslib_1 from "tslib";
import { Directive, Input } from "@angular/core";
import { FormGroup, FormArray } from "@angular/forms";
import { AnnotationTypes } from "../core/validator.static";
import { defaultContainer } from "../core/defaultContainer";
import { BaseDirective } from "./base-directive";
import { Linq } from "../util/linq";
import { conditionalChangeValidator } from '../reactive-form-validators/conditional-change.validator';
import { CONDITIONAL_VALIDATOR, MODEL } from '../const/app.const';
import * as ɵngcc0 from '@angular/core';
var RxwebFormDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RxwebFormDirective, _super);
    function RxwebFormDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clearTimeoutNumber = 0;
        _this.validationRule = {};
        return _this;
    }
    RxwebFormDirective.prototype.ngAfterContentInit = function () {
        if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent == null) {
            this.expressionProcessor(this.formGroup.controls);
            this.setConditionalValidator(this.formGroup.controls);
        }
        else if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent instanceof FormArray) {
            this.expressionProcessor(this.formGroup.controls);
            this.setConditionalValidator(this.formGroup.controls);
        }
        else if (this.ngForm) {
            this.configureModelValidations();
        }
    };
    RxwebFormDirective.prototype.configureModelValidations = function () {
        var _this = this;
        this.clearTimeoutNumber = setTimeout(function () {
            clearTimeout(_this.clearTimeoutNumber);
            _this.applyValidations(_this.ngForm.form.controls);
            _this.expressionProcessor(_this.ngForm.form.controls);
            _this.setConditionalValidator(_this.ngForm.form.controls);
            _this.updateValueAndValidity(_this.ngForm.form.controls);
        }, 500);
    };
    RxwebFormDirective.prototype.updateValueAndValidity = function (controls) {
        var _this = this;
        Object.keys(controls).forEach(function (key) {
            if (controls[key] instanceof FormGroup)
                _this.updateValueAndValidity(controls[key].controls);
            else if (controls[key] instanceof FormArray)
                _this.updateValueAndValidity(controls[key].controls);
            else
                controls[key].updateValueAndValidity();
        });
    };
    RxwebFormDirective.prototype.expressionProcessor = function (controls, rootFieldName) {
        var _this = this;
        if (rootFieldName === void 0) { rootFieldName = ""; }
        Object.keys(controls).forEach(function (fieldName) {
            var formControl = controls[fieldName];
            if (formControl.validatorConfig) {
                Object.keys(AnnotationTypes).forEach(function (validatorName) {
                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].disableExpression) {
                        formControl["disableExpression"] = formControl.validatorConfig[validatorName].disableExpression;
                        var columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].disableExpression);
                        defaultContainer.addChangeValidation(_this.validationRule, rootFieldName + fieldName, columns);
                    }
                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].conditionalExpression) {
                        var columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].conditionalExpression);
                        defaultContainer.addChangeValidation(_this.validationRule, rootFieldName + fieldName, columns);
                    }
                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].dynamicConfig) {
                        var columns = Linq.dynamicConfigParser(formControl.validatorConfig[validatorName].dynamicConfig, fieldName);
                        defaultContainer.addChangeValidation(_this.validationRule, rootFieldName + fieldName, columns);
                    }
                    if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.and || validatorName == AnnotationTypes.or || validatorName == AnnotationTypes.not)) {
                        Object.keys(formControl.validatorConfig[validatorName].validation).forEach(function (t) {
                            if (typeof formControl.validatorConfig[validatorName].validation[t] !== "boolean")
                                defaultContainer.setLogicalConditional(_this.validationRule, t, formControl.validatorConfig[validatorName].validation[t].fieldName, fieldName);
                        });
                    }
                    else if (formControl.validatorConfig[validatorName] && ((validatorName == AnnotationTypes.compare || validatorName == AnnotationTypes.greaterThan || validatorName == AnnotationTypes.greaterThanEqualTo || validatorName == AnnotationTypes.lessThan || validatorName == AnnotationTypes.lessThanEqualTo || validatorName == AnnotationTypes.different || validatorName == AnnotationTypes.factor || validatorName == AnnotationTypes.minTime || validatorName == AnnotationTypes.maxTime) || (validatorName == AnnotationTypes.creditCard && formControl.validatorConfig[validatorName].fieldName) || ((validatorName == AnnotationTypes.minDate || validatorName == AnnotationTypes.maxDate) && formControl.validatorConfig[validatorName].fieldName))) {
                        defaultContainer.setConditionalValueProp(_this.validationRule, formControl.validatorConfig[validatorName].fieldName, fieldName);
                    }
                });
            }
            else if (formControl instanceof FormGroup) {
                _this.expressionProcessor(formControl.controls, fieldName + ".");
            }
            else if (formControl instanceof FormArray) {
                if (formControl.controls)
                    formControl.controls.forEach(function (t, i) {
                        if (t.controls)
                            _this.expressionProcessor(t.controls, fieldName + "[]");
                    });
            }
        });
    };
    RxwebFormDirective.prototype.setConditionalValidator = function (controls) {
        var _this = this;
        Object.keys(controls).forEach(function (fieldName) {
            if (_this.validationRule.conditionalValidationProps && _this.validationRule.conditionalValidationProps[fieldName]) {
                controls[fieldName][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(_this.validationRule.conditionalValidationProps[fieldName]);
            }
            else if (controls[fieldName] instanceof FormGroup && _this.validationRule.conditionalObjectProps) {
                var fields = _this.validationRule.conditionalObjectProps.filter(function (t) { return t.objectPropName == fieldName; });
                var nestedFormGroup_1 = controls[fieldName];
                var propWiseConditionalControls_1 = {};
                fields.forEach(function (x) {
                    if (!propWiseConditionalControls_1[x.propName])
                        propWiseConditionalControls_1[x.propName] = [];
                    propWiseConditionalControls_1[x.propName].push(x.referencePropName);
                });
                Object.keys(propWiseConditionalControls_1).forEach(function (key) {
                    nestedFormGroup_1.controls[key][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(propWiseConditionalControls_1[key]);
                });
            }
            else if (controls[fieldName] instanceof FormArray) {
                //fix https://github.com/rxweb/rxweb/issues/274
                controls[fieldName].controls.forEach(function (t, i) {
                    var _a;
                    if (t.controls == undefined)
                        _this.setConditionalValidator((_a = {}, _a[i] = t, _a));
                    else
                        _this.setConditionalValidator(t.controls);
                });
            }
        });
    };
    RxwebFormDirective.prototype.ngOnDestroy = function () {
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", FormGroup)
    ], RxwebFormDirective.prototype, "formGroup", void 0);
    tslib_1.__decorate([
        Input('rxwebForm'),
        tslib_1.__metadata("design:type", Object)
    ], RxwebFormDirective.prototype, "ngForm", void 0);
RxwebFormDirective.ɵfac = function RxwebFormDirective_Factory(t) { return ɵRxwebFormDirective_BaseFactory(t || RxwebFormDirective); };
RxwebFormDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RxwebFormDirective, selectors: [["", "formGroup", ""], ["", "rxwebForm", ""]], inputs: { formGroup: "formGroup", ngForm: ["rxwebForm", "ngForm"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
var ɵRxwebFormDirective_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(RxwebFormDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RxwebFormDirective, [{
        type: Directive,
        args: [{
                selector: '[formGroup],[rxwebForm]'
            }]
    }], null, { formGroup: [{
            type: Input
        }], ngForm: [{
            type: Input,
            args: ['rxwebForm']
        }] }); })();
    return RxwebFormDirective;
}(BaseDirective));
export { RxwebFormDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,