import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
import { of } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var VALIDATOR_CONFIG = "validatorConfig";
var ImageFileControlDirective = /** @class */ (function () {
    function ImageFileControlDirective(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    ImageFileControlDirective_1 = ImageFileControlDirective;
    Object.defineProperty(ImageFileControlDirective.prototype, "image", {
        set: function (config) {
            this.imageValidation = APP_VALIDATORS.image(config);
        },
        enumerable: true,
        configurable: true
    });
    ImageFileControlDirective.prototype.setConfig = function (control) {
        var image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    };
    ImageFileControlDirective.prototype.validate = function (control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return of(null);
    };
    var ImageFileControlDirective_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ImageFileControlDirective.prototype, "image", null);
    ImageFileControlDirective = ImageFileControlDirective_1 = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], ImageFileControlDirective);
ImageFileControlDirective.ɵfac = function ImageFileControlDirective_Factory(t) { return new (t || ImageFileControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ImageFileControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ImageFileControlDirective, selectors: [["input", "type", "file"]], inputs: { image: "image" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_ASYNC_VALIDATORS,
                useExisting: forwardRef(function () { return ImageFileControlDirective_1; }),
                multi: true
            }])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageFileControlDirective, [{
        type: Directive,
        args: [{
                selector: "input[type=file]",
                providers: [{
                        provide: NG_ASYNC_VALIDATORS,
                        useExisting: forwardRef(function () { return ImageFileControlDirective_1; }),
                        multi: true
                    }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { image: [{
            type: Input
        }] }); })();
    return ImageFileControlDirective;
}());
export { ImageFileControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFvQyxtQkFBbUIsRUFBaUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFDdEMsSUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztBQVMzQztBQUE2RCxJQVV6RCxtQ0FBb0IsVUFBc0I7QUFDN0MsUUFEdUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBUjNDLGdCQUFXLEdBQVcsS0FBSyxDQUFDO0FBQ2hDLFFBUVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBcUIsQ0FBQztBQUN4RCxJQUFJLENBQUM7QUFDTCxrQ0FiYSx5QkFBeUI7QUFBRSxJQU0zQixzQkFBSSw0Q0FBSztBQUFJLGFBQWIsVUFBVSxNQUFrQjtBQUN4QyxZQUFLLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxRCxRQUFJLENBQUM7QUFFTDtBQUEwQjtBQUN0QixPQUhDO0FBQ0wsSUFLSSw2Q0FBUyxHQUFULFVBQVUsT0FBdUI7QUFDcEMsUUFBTyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDNUIsUUFBUSxJQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN4RixZQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6RCxRQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQzlCLElBQUksQ0FBQztBQUVMLElBQUksNENBQVEsR0FBUixVQUFTLE9BQXdCO0FBQUksUUFDbkMsSUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQzFCLFlBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxRQUFNLElBQUcsSUFBSSxDQUFDLGVBQWUsRUFBQztBQUM5QixZQUFVLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRSxTQUFPO0FBQ1AsUUFBUSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixJQUFJLENBQUM7QUFBRTtBQUV5QixJQXhCbkI7QUFBcUIsUUFBN0IsS0FBSyxFQUFFO0FBQUU7QUFDTztBQUdSLDBEQUZSO0FBRUwsSUFWYSx5QkFBeUIsOERBUnJDLFNBQVMsQ0FBQyxjQUNQLFFBQVEsRUFBRSwzQ0FPTiwwQ0FVNEIsVUFBVTtNQWpCZCxjQUM1QixTQUFTLEVBQUUsQ0FBQyxoQ0FpQmhCLE9BWGEseUJBQXlCLENBNkJyQzttQkFsQ08sT0FBTyxFQUFFLG1CQUFtQixzQkFDNUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsMkJBQXlCLEVBQXpCLENBQXlCLENBQUMsc0JBQ3hELEtBQUs7QUFBRSxJQUFJLGtCQUNkLENBQUMsVUFDTCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztvQkErQkY7QUFBQyxJQURELGdDQUFDO0FBQ0EsQ0FEQSxBQTdCRCxJQTZCQzs7QUEzQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF0QkEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQVJBLEFBQUEsQUFSQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVdBLEFBQUEsQUFWQSxBQUFBLEFBNkJBLEFBQUEsQUFBQSxBQUFBLEFBN0JBLEFBNkJBLEFBN0JBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0LCBEaXJlY3RpdmUgLGZvcndhcmRSZWYsRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7VmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sLCBOR19BU1lOQ19WQUxJREFUT1JTLEFzeW5jVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0ltYWdlQ29uZmlnfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJ1xyXG5pbXBvcnQgeyBBUFBfVkFMSURBVE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdC9hcHAtdmFsaWRhdG9ycy5jb25zdFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5jb25zdCBWQUxJREFUT1JfQ09ORklHID0gXCJ2YWxpZGF0b3JDb25maWdcIjtcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogXCJpbnB1dFt0eXBlPWZpbGVdXCIsXHJcbiAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfQVNZTkNfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlKSxcclxuICAgICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEltYWdlRmlsZUNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBBc3luY1ZhbGlkYXRvciAge1xyXG4gICAgZWxlbWVudDphbnlcclxuICAgIGlzUHJvY2Vzc2VkOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGltYWdlVmFsaWRhdGlvbjpGdW5jdGlvbjtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaW1hZ2UoY29uZmlnOkltYWdlQ29uZmlnKXtcclxuICAgICAgdGhpcy5pbWFnZVZhbGlkYXRpb24gPSBBUFBfVkFMSURBVE9SUy5pbWFnZShjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZil7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29uZmlnKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sKXtcclxuICAgICAgICBsZXQgaW1hZ2UgPSBcImltYWdlXCI7XHJcbiAgICAgICAgaWYoIXRoaXNbaW1hZ2VdICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR10gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVtpbWFnZV0pXHJcbiAgICAgICAgICB0aGlzW2ltYWdlXSA9IGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11baW1hZ2VdO1xyXG4gICAgICB0aGlzLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBQcm9taXNlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB8IE9ic2VydmFibGU8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+IHtcclxuICAgICAgaWYoIXRoaXMuaXNQcm9jZXNzZWQpXHJcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29udHJvbCk7XHJcbiAgICAgIGlmKHRoaXMuaW1hZ2VWYWxpZGF0aW9uKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlVmFsaWRhdGlvbihjb250cm9sLHRoaXMuZWxlbWVudC5maWxlcyk7XHJcbiAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9ICAgIFxyXG59XHJcbiJdfQ==