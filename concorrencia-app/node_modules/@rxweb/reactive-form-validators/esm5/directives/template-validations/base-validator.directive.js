import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { INPUT, SELECT, CHECKBOX, TEXTAREA, RADIO, FILE, CHANGE } from "../../const";
import { ControlExpressionProcess } from './control-expression-process';
import * as ɵngcc0 from '@angular/core';
var BaseValidator = /** @class */ (function (_super) {
    tslib_1.__extends(BaseValidator, _super);
    function BaseValidator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.validators = [];
        return _this;
    }
    BaseValidator.prototype.validation = function (control) {
        var e_1, _a;
        var result = null;
        try {
            for (var _b = tslib_1.__values(this.validators), _c = _b.next(); !_c.done; _c = _b.next()) {
                var validator = _c.value;
                result = validator(control);
                if (result)
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!result && this.maskProvider)
            result = this.maskProvider.validate();
        return result;
    };
    BaseValidator.prototype.setEventName = function () {
        var eventName = '';
        switch (this.element.tagName) {
            case INPUT:
            case TEXTAREA:
                eventName = (this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE) ? CHANGE : INPUT;
                break;
            case SELECT:
                eventName = CHANGE;
                break;
        }
        this.eventName = eventName.toLowerCase();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], BaseValidator.prototype, "formControl", void 0);
BaseValidator.ɵfac = function BaseValidator_Factory(t) { return ɵBaseValidator_BaseFactory(t || BaseValidator); };
BaseValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseValidator, inputs: { formControl: "formControl" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
var ɵBaseValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BaseValidator);
    return BaseValidator;
}(ControlExpressionProcess));
export { BaseValidator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJAcnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2RpcmVjdGl2ZXMvdGVtcGxhdGUtdmFsaWRhdGlvbnMvYmFzZS12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRXJDLE9BQU8sRUFDSCxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQ2pDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUN0QixNQUFNLGFBQWEsQ0FBQztBQUVyQixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTs7QUFHdkU7QUFBdUQsSUFBcEIseUNBQXdCO0FBQUMsSUFBNUQ7QUFBMkIsUUFBM0IscUVBcUNDO0FBQ0QsUUFuQ2MsZ0JBQVUsR0FBbUIsRUFBRSxDQUFDO0FBQzlDO0FBQXNCLElBaUN0QixDQUFDO0FBQ0QsSUE5Qkksa0NBQVUsR0FBVixVQUFXLE9BQXdCO0FBQUk7QUFBcUIsUUFDeEQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQzFCO0FBQWMsWUFBTixLQUFzQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQSxnQkFBQSw0QkFBRTtBQUMvQyxnQkFEYSxJQUFJLFNBQVMsV0FBQTtBQUFFLGdCQUNoQixNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLGdCQUFZLElBQUksTUFBTTtBQUN0QixvQkFBZ0IsTUFBTTtBQUN0QixhQUFTO0FBQ1Q7QUFBVTtBQUNRO0FBQWtCO0FBQ2hDO0FBS087QUFBYztBQUNjO0FBQzlCLFFBVEQsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsWUFBWTtBQUN4QyxZQUFXLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2pELFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsSUFBSSxDQUFDO0FBRUwsSUFDYyxvQ0FBWSxHQUF0QjtBQUFjLFFBQ1YsSUFBSSxTQUFTLEdBQVcsRUFBRSxDQUFDO0FBQ25DLFFBQVEsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUN0QyxZQUFZLEtBQUssS0FBSyxDQUFDO0FBQ3ZCLFlBQVksS0FBSyxRQUFRO0FBQ3pCLGdCQUFnQixTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN4SSxnQkFBZ0IsTUFBTTtBQUN0QixZQUFZLEtBQUssTUFBTTtBQUN2QixnQkFBZ0IsU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUNuQyxnQkFBZ0IsTUFBTTtBQUN0QixTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqRCxJQUFJLENBQUM7QUFFTCxJQWxDYTtBQUFxQixRQUE3QixLQUFLLEVBQUU7QUFBRTtBQUVSLHNEQUZrRDs7OzJGQUN4RDtBQUNBLElBa0NBLG9CQUFDO0FBQ0EsQ0FEQSxBQXJDRCxDQUFtQyx3QkFBd0IsR0FxQzFEOztBQS9DQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBcUNBLEFBbENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFrQ0EsQUFBQSxBQTdCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFoQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQW9DQSxBQUFBLEFBQUEsQUFyQ0EsQUFBQSxBQUFBLEFBcUNBLEFBckNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCJcclxuaW1wb3J0IHsgIFZhbGlkYXRvckZuLCBBYnN0cmFjdENvbnRyb2wsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge1xyXG4gICAgSU5QVVQsIFNFTEVDVCwgQ0hFQ0tCT1gsIFRFWFRBUkVBLCBcclxuICAgIFJBRElPLCBGSUxFLCBDSEFOR0VcclxufSBmcm9tIFwiLi4vLi4vY29uc3RcIjtcclxuXHJcbmltcG9ydCB7IENvbnRyb2xFeHByZXNzaW9uUHJvY2VzcyB9IGZyb20gJy4vY29udHJvbC1leHByZXNzaW9uLXByb2Nlc3MnXHJcbmltcG9ydCB7IE1hc2tQcm92aWRlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9lbGVtZW50LXByb2Nlc3Nvci9tYXNrLnByb3ZpZGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlVmFsaWRhdG9yIGV4dGVuZHMgQ29udHJvbEV4cHJlc3Npb25Qcm9jZXNzIHtcclxuICAgIEBJbnB1dCgpIGZvcm1Db250cm9sOiBGb3JtQ29udHJvbCB8IEFic3RyYWN0Q29udHJvbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXSAgPSBbXTtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50OiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgZXZlbnROYW1lOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgbWFza1Byb3ZpZGVyOiBNYXNrUHJvdmlkZXI7XHJcblxyXG4gICAgdmFsaWRhdGlvbihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCB2YWxpZGF0b3Igb2YgdGhpcy52YWxpZGF0b3JzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbGlkYXRvcihjb250cm9sKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlc3VsdCAmJiB0aGlzLm1hc2tQcm92aWRlcilcclxuICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1hc2tQcm92aWRlci52YWxpZGF0ZSgpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBzZXRFdmVudE5hbWUoKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50TmFtZTogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmVsZW1lbnQudGFnTmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlIElOUFVUOlxyXG4gICAgICAgICAgICBjYXNlIFRFWFRBUkVBOlxyXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lID0gKHRoaXMuZWxlbWVudC50eXBlID09IENIRUNLQk9YIHx8IHRoaXMuZWxlbWVudC50eXBlID09IFJBRElPIHx8IHRoaXMuZWxlbWVudC50eXBlID09IEZJTEUpID8gQ0hBTkdFIDogSU5QVVQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTRUxFQ1Q6XHJcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBDSEFOR0U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudE5hbWUgPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG4iXX0=