import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, forwardRef, Renderer2 } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from '../../const/app-validators.const';
import { BaseValidator } from './base-validator.directive';
import { ELEMENT_VALUE, BLUR, FOCUS, BLANK } from "../../const";
import { TEMPLATE_VALIDATION_CONFIG, CONDITIONAL_VALIDATOR, VALIDATOR_CONFIG } from '../../const/app.const';
import { ApplicationUtil } from '../../util/app-util';
import { DecimalProvider } from "../../domain/element-processor/decimal.provider";
import { RegexValidator } from '../../util';
import { MaskProvider } from '../../domain/element-processor/mask.provider';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../domain/element-processor/decimal.provider';
var NGMODEL_BINDING = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return RxFormControlDirective; }),
    multi: true
};
var ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];
var NUMERIC = "numeric";
var IS_FORMAT = "isFormat";
var DIGITS_INFO = "digitsInfo";
var RxFormControlDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RxFormControlDirective, _super);
    function RxFormControlDirective(elementRef, renderer, decimalProvider) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.decimalProvider = decimalProvider;
        _this.eventListeners = [];
        _this.isNumericSubscribed = false;
        _this.isFocusCalled = false;
        _this.isMasked = false;
        _this.element = elementRef.nativeElement;
        _this.setEventName();
        return _this;
    }
    Object.defineProperty(RxFormControlDirective.prototype, "validationControls", {
        get: function () {
            return this.controls;
        },
        set: function (value) {
            this.controls = value;
        },
        enumerable: true,
        configurable: true
    });
    RxFormControlDirective.prototype.ngOnInit = function () {
        var _this = this;
        var validators = [];
        Object.keys(APP_VALIDATORS).forEach(function (validatorName) {
            if ((_this["rx" + validatorName]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && _this["rx" + validatorName] == BLANK)) {
                validators.push(APP_VALIDATORS[validatorName](_this["rx" + validatorName]));
                if (_this.name && !(_this.formControlName && _this.formControl)) {
                    ApplicationUtil.configureControl(_this.controlConfig, _this["rx" + validatorName], validatorName);
                }
            }
        });
        if (validators.length > 0)
            this.validators = validators;
        if (this.rxnumeric && (this.rxnumeric.isFormat || this.rxnumeric.digitsInfo)) {
            this.bindNumericElementEvent();
        }
    };
    RxFormControlDirective.prototype.blurEvent = function () {
        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {
            if (this.formControl.value !== null && this.formControl.value !== undefined) {
                var value = this.decimalProvider.transFormDecimal(this.formControl.value, this.rxnumeric.digitsInfo);
                value = (!this.rxnumeric.isFormat) ? this.decimalProvider.replacer(value) : value;
                this.setValueOnElement(value);
            }
            this.isFocusCalled = false;
        }
    };
    RxFormControlDirective.prototype.bindNumericElementEvent = function (config) {
        var _this = this;
        if (config)
            this.rxnumeric = config;
        var listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));
        this.eventListeners.push(listener);
        listener = this.renderer.listen(this.element, FOCUS, function (event) {
            _this.isFocusCalled = true;
            if (!(_this.formControl && _this.formControl.errors && _this.formControl.errors.numeric) && _this.formControl.value != null) {
                var value = _this.decimalProvider.replacer(_this.element.value);
                _this.setValueOnElement(value);
            }
        });
        this.eventListeners.push(listener);
    };
    RxFormControlDirective.prototype.bindValueChangeEvent = function () {
        var _this = this;
        if (this.eventName != BLANK) {
            var listener = this.renderer.listen(this.element, this.eventName, function () {
                Object.keys(_this.validationControls).forEach(function (fieldName) {
                    _this.validationControls[fieldName].updateValueAndValidity();
                });
            });
            this.eventListeners.push(listener);
        }
    };
    RxFormControlDirective.prototype.subscribeNumericFormatter = function () {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG][NUMERIC] && (this.formControl[VALIDATOR_CONFIG][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG][NUMERIC][DIGITS_INFO])) {
            if (!this.isNumericSubscribed) {
                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG][NUMERIC]);
                this.isNumericSubscribed = true;
            }
            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {
                this.blurEvent();
            }
        }
    };
    RxFormControlDirective.prototype.subscribeMaskValidator = function () {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG]["mask"] && !this.isMasked) {
            var config = this.formControl[VALIDATOR_CONFIG]["mask"];
            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);
            this.isMasked = true;
        }
    };
    RxFormControlDirective.prototype.setValueOnElement = function (value) {
        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);
    };
    RxFormControlDirective.prototype.setTemplateValidators = function (control) {
        for (var validatorName in control[VALIDATOR_CONFIG]) {
            this[validatorName] = control[VALIDATOR_CONFIG][validatorName];
        }
        delete control[TEMPLATE_VALIDATION_CONFIG];
        delete control[VALIDATOR_CONFIG];
        this.ngOnInit();
    };
    RxFormControlDirective.prototype.updateOnElementClass = function (element) {
        var previousClassName = '';
        return function (className) {
            if (previousClassName)
                element.classList.remove(previousClassName);
            if (className)
                element.classList.add(className);
            previousClassName = className;
        };
    };
    RxFormControlDirective.prototype.setValidatorConfig = function (control) {
        if (!this.formControl) {
            this.formControl = control;
            var rxFormControl = this.formControl;
            if (rxFormControl.updateOnElementClass)
                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);
        }
        this.subscribeMaskValidator();
        this.subscribeNumericFormatter();
        if (control[TEMPLATE_VALIDATION_CONFIG])
            this.setTemplateValidators(control);
        if (control[CONDITIONAL_VALIDATOR]) {
            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];
            delete control[CONDITIONAL_VALIDATOR];
        }
    };
    RxFormControlDirective.prototype.validate = function (control) {
        this.setValidatorConfig(control);
        if (this.conditionalValidator)
            this.conditionalValidator(control);
        if (!this.isProcessed)
            this.setModelConfig(control);
        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;
    };
    RxFormControlDirective.prototype.ngOnDestroy = function () {
        this.controls = undefined;
        var eventCount = this.eventListeners.length;
        for (var i = 0; i < eventCount; i++) {
            this.eventListeners[0]();
            this.eventListeners.splice(0, 1);
        }
        this.eventListeners = [];
        if (this.maskProvider)
            this.maskProvider.onDestroy();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxalpha", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxalphaNumeric", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxascii", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxcompare", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxcompose", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxcontains", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxcreditCard", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxdataUri", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxdifferent", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxdigit", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxemail", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxendsWith", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxeven", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxextension", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxfactor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxfileSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxgreaterThanEqualTo", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxgreaterThan", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxhexColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxjson", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxlatitude", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxlatLong", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxleapYear", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxlessThan", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxlessThanEqualTo", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxlongitude", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxlowerCase", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxmac", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxmaxDate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxmaxLength", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxmaxNumber", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxminDate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxminLength", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxminNumber", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxnumeric", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxodd", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxpassword", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxport", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxprimeNumber", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxrequired", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxrange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxrule", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxstartsWith", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxtime", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxupperCase", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxurl", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxunique", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxnotEmpty", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxcusip", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxgrid", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RxFormControlDirective.prototype, "rxdate", void 0);
    RxFormControlDirective = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2, DecimalProvider])
    ], RxFormControlDirective);
RxFormControlDirective.ɵfac = function RxFormControlDirective_Factory(t) { return new (t || RxFormControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DecimalProvider)); };
RxFormControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RxFormControlDirective, selectors: [["", "ngModel", ""], ["", "formControlName", ""], ["", "formControl", ""]], inputs: { rxnumeric: "rxnumeric", rxalpha: "rxalpha", rxalphaNumeric: "rxalphaNumeric", rxascii: "rxascii", rxcompare: "rxcompare", rxcompose: "rxcompose", rxcontains: "rxcontains", rxcreditCard: "rxcreditCard", rxdataUri: "rxdataUri", rxdifferent: "rxdifferent", rxdigit: "rxdigit", rxemail: "rxemail", rxendsWith: "rxendsWith", rxeven: "rxeven", rxextension: "rxextension", rxfactor: "rxfactor", rxfileSize: "rxfileSize", rxgreaterThanEqualTo: "rxgreaterThanEqualTo", rxgreaterThan: "rxgreaterThan", rxhexColor: "rxhexColor", rxjson: "rxjson", rxlatitude: "rxlatitude", rxlatLong: "rxlatLong", rxleapYear: "rxleapYear", rxlessThan: "rxlessThan", rxlessThanEqualTo: "rxlessThanEqualTo", rxlongitude: "rxlongitude", rxlowerCase: "rxlowerCase", rxmac: "rxmac", rxmaxDate: "rxmaxDate", rxmaxLength: "rxmaxLength", rxmaxNumber: "rxmaxNumber", rxminDate: "rxminDate", rxminLength: "rxminLength", rxminNumber: "rxminNumber", rxodd: "rxodd", rxpassword: "rxpassword", rxport: "rxport", rxprimeNumber: "rxprimeNumber", rxrequired: "rxrequired", rxrange: "rxrange", rxrule: "rxrule", rxstartsWith: "rxstartsWith", rxtime: "rxtime", rxupperCase: "rxupperCase", rxurl: "rxurl", rxunique: "rxunique", rxnotEmpty: "rxnotEmpty", rxcusip: "rxcusip", rxgrid: "rxgrid", rxdate: "rxdate" }, features: [ɵngcc0.ɵɵProvidersFeature([NGMODEL_BINDING]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RxFormControlDirective, [{
        type: Directive,
        args: [{
                selector: '[ngModel],[formControlName],[formControl]',
                providers: [NGMODEL_BINDING]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.DecimalProvider }]; }, { rxnumeric: [{
            type: Input
        }], rxalpha: [{
            type: Input
        }], rxalphaNumeric: [{
            type: Input
        }], rxascii: [{
            type: Input
        }], rxcompare: [{
            type: Input
        }], rxcompose: [{
            type: Input
        }], rxcontains: [{
            type: Input
        }], rxcreditCard: [{
            type: Input
        }], rxdataUri: [{
            type: Input
        }], rxdifferent: [{
            type: Input
        }], rxdigit: [{
            type: Input
        }], rxemail: [{
            type: Input
        }], rxendsWith: [{
            type: Input
        }], rxeven: [{
            type: Input
        }], rxextension: [{
            type: Input
        }], rxfactor: [{
            type: Input
        }], rxfileSize: [{
            type: Input
        }], rxgreaterThanEqualTo: [{
            type: Input
        }], rxgreaterThan: [{
            type: Input
        }], rxhexColor: [{
            type: Input
        }], rxjson: [{
            type: Input
        }], rxlatitude: [{
            type: Input
        }], rxlatLong: [{
            type: Input
        }], rxleapYear: [{
            type: Input
        }], rxlessThan: [{
            type: Input
        }], rxlessThanEqualTo: [{
            type: Input
        }], rxlongitude: [{
            type: Input
        }], rxlowerCase: [{
            type: Input
        }], rxmac: [{
            type: Input
        }], rxmaxDate: [{
            type: Input
        }], rxmaxLength: [{
            type: Input
        }], rxmaxNumber: [{
            type: Input
        }], rxminDate: [{
            type: Input
        }], rxminLength: [{
            type: Input
        }], rxminNumber: [{
            type: Input
        }], rxodd: [{
            type: Input
        }], rxpassword: [{
            type: Input
        }], rxport: [{
            type: Input
        }], rxprimeNumber: [{
            type: Input
        }], rxrequired: [{
            type: Input
        }], rxrange: [{
            type: Input
        }], rxrule: [{
            type: Input
        }], rxstartsWith: [{
            type: Input
        }], rxtime: [{
            type: Input
        }], rxupperCase: [{
            type: Input
        }], rxurl: [{
            type: Input
        }], rxunique: [{
            type: Input
        }], rxnotEmpty: [{
            type: Input
        }], rxcusip: [{
            type: Input
        }], rxgrid: [{
            type: Input
        }], rxdate: [{
            type: Input
        }] }); })();
    return RxFormControlDirective;
}(BaseValidator));
export { RxFormControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,