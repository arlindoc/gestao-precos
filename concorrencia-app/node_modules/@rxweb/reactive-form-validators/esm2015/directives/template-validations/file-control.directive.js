import * as ɵngcc0 from '@angular/core';
var FileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
const VALIDATOR_CONFIG = "validatorConfig";
const FILE_VALIDATOR_NAMES = ["extension", "fileSize", "file"];
let FileControlDirective = FileControlDirective_1 = class FileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.validators = [];
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this.element = elementRef.nativeElement;
    }
    onChangeCall(element) {
        let files = element.files;
        if (this.writeFile)
            this.onChange(files);
        else {
            if (files.length > 0)
                this.onChange(element.value);
            else
                this.onChange(undefined);
        }
    }
    writeValue(value) { }
    registerOnChange(invocation) { this.onChange = invocation; }
    registerOnTouched(invocation) { this.onTouched = invocation; }
    set extension(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);
    }
    set fileSize(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);
    }
    set file(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);
    }
    setConfig(control) {
        FILE_VALIDATOR_NAMES.forEach(t => {
            if (!this[t] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][t])
                this[t] = control[VALIDATOR_CONFIG][t];
        });
        this.isProcessed = true;
    }
    pushValidator(validatorName, config) {
        if (config)
            this.validators.push(APP_VALIDATORS[validatorName](config));
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        var result = null;
        for (var validator of this.validators) {
            result = validator(control, this.element.files);
            if (result)
                break;
        }
        return result;
    }
};
FileControlDirective.ɵfac = function FileControlDirective_Factory(t) { return new (t || FileControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
FileControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileControlDirective, selectors: [["input", "type", "file"]], hostBindings: function FileControlDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("change", function FileControlDirective_change_HostBindingHandler($event) { return ctx.onChangeCall($event.target); })("blur", function FileControlDirective_blur_HostBindingHandler() { return ctx.onTouched(); });
    } }, inputs: { extension: "extension", fileSize: "fileSize", file: "file", writeFile: "writeFile" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective_1, multi: true }, {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FileControlDirective_1),
                multi: true
            }])] });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FileControlDirective.prototype, "writeFile", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FileControlDirective.prototype, "extension", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FileControlDirective.prototype, "fileSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FileControlDirective.prototype, "file", null);
FileControlDirective = FileControlDirective_1 = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef])
], FileControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileControlDirective, [{
        type: Directive,
        args: [{
                selector: "input[type=file]",
                host: {
                    "(change)": "onChangeCall($event.target)",
                    "(blur)": "onTouched()"
                },
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective_1, multi: true }, {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => FileControlDirective_1),
                        multi: true
                    }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { extension: [{
            type: Input
        }], fileSize: [{
            type: Input
        }], file: [{
            type: Input
        }], writeFile: [{
            type: Input
        }] }); })();
export { FileControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,