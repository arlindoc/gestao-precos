import * as ɵngcc0 from '@angular/core';
var AsyncValidationDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { of } from 'rxjs';
let AsyncValidationDirective = AsyncValidationDirective_1 = class AsyncValidationDirective {
    validate(control) {
        if (this.async)
            return this.async(control);
        return of(null);
    }
};
AsyncValidationDirective.ɵfac = function AsyncValidationDirective_Factory(t) { return new (t || AsyncValidationDirective)(); };
AsyncValidationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AsyncValidationDirective, selectors: [["", "ngModel", ""], ["", "formControlName", ""], ["", "formControl", ""]], inputs: { async: "async" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_ASYNC_VALIDATORS,
                useExisting: forwardRef(() => AsyncValidationDirective_1),
                multi: true
            }])] });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], AsyncValidationDirective.prototype, "async", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AsyncValidationDirective, [{
        type: Directive,
        args: [{
                selector: '[ngModel],[formControlName],[formControl]',
                providers: [{
                        provide: NG_ASYNC_VALIDATORS,
                        useExisting: forwardRef(() => AsyncValidationDirective_1),
                        multi: true
                    }]
            }]
    }], null, { async: [{
            type: Input
        }] }); })();
export { AsyncValidationDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIkByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvZGlyZWN0aXZlcy90ZW1wbGF0ZS12YWxpZGF0aW9ucy9hc3luYy12YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFxQyxtQkFBbUIsRUFBb0MsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxSCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBU3RDLElBQWEsd0JBQXdCLGdDQUFyQyxNQUFhLHdCQUF3QjtBQUFHLElBR3BDLFFBQVEsQ0FBQyxPQUF3QjtBQUFJLFFBQ2pDLElBQUksSUFBSSxDQUFDLEtBQUs7QUFDdEIsWUFBWSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkMsUUFBUSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixJQUFJLENBQUM7QUFDTCxDQUFDOzs7Ozs7b0JBQUE7QUFQWTtBQUVMLElBRkgsS0FBSyxFQUFFO0FBQUU7QUFFb0IsdURBRlY7QUFEWCx3QkFBd0IseURBUnBDO09BQVMsQ0FBQyxVQUNQO0NBQVEsRUFBRTs2QkFBMkMsVUFDckQsU0FBUyxFQUFFLENBQUMsa0JBQ1I7S0FBTyxFQUFFLG1CQUFtQjtjQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUF3QixDQUFDLGtCQUN2RCxLQUFLLEVBQUUsSUFBSSxjQUNkLENBQUMsTUFDTCxDQUFDLElBQ1c7YUFBd0IsQ0FRcEM7Ozs7O29CQUNEOztBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQVJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCwgTkdfQVNZTkNfVkFMSURBVE9SUywgQXN5bmNWYWxpZGF0b3IsIEFzeW5jVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbbmdNb2RlbF0sW2Zvcm1Db250cm9sTmFtZV0sW2Zvcm1Db250cm9sXScsXHJcbiAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfQVNZTkNfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBBc3luY1ZhbGlkYXRpb25EaXJlY3RpdmUpLFxyXG4gICAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXN5bmNWYWxpZGF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgQXN5bmNWYWxpZGF0b3Ige1xyXG4gICAgQElucHV0KCkgYXN5bmM6IGFueTtcclxuXHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBQcm9taXNlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB8IE9ic2VydmFibGU8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+IHtcclxuICAgICAgICBpZiAodGhpcy5hc3luYylcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmMoY29udHJvbCk7XHJcbiAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==