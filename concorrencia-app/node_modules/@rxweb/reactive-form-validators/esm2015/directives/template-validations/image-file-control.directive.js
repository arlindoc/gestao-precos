import * as ɵngcc0 from '@angular/core';
var ImageFileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
import { of } from 'rxjs';
const VALIDATOR_CONFIG = "validatorConfig";
let ImageFileControlDirective = ImageFileControlDirective_1 = class ImageFileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    set image(config) {
        this.imageValidation = APP_VALIDATORS.image(config);
    }
    setConfig(control) {
        let image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return of(null);
    }
};
ImageFileControlDirective.ɵfac = function ImageFileControlDirective_Factory(t) { return new (t || ImageFileControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ImageFileControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ImageFileControlDirective, selectors: [["input", "type", "file"]], inputs: { image: "image" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_ASYNC_VALIDATORS,
                useExisting: forwardRef(() => ImageFileControlDirective_1),
                multi: true
            }])] });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ImageFileControlDirective.prototype, "image", null);
ImageFileControlDirective = ImageFileControlDirective_1 = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef])
], ImageFileControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageFileControlDirective, [{
        type: Directive,
        args: [{
                selector: "input[type=file]",
                providers: [{
                        provide: NG_ASYNC_VALIDATORS,
                        useExisting: forwardRef(() => ImageFileControlDirective_1),
                        multi: true
                    }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { image: [{
            type: Input
        }] }); })();
export { ImageFileControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQW9DLG1CQUFtQixFQUFpQixNQUFNLGdCQUFnQixDQUFDO0FBRXRHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFTM0MsSUFBYSx5QkFBeUIsaUNBQXRDLE1BQWEseUJBQXlCO0FBQUcsSUFVckMsWUFBb0IsVUFBc0I7QUFDN0MsUUFEdUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBUjNDLGdCQUFXLEdBQVcsS0FBSyxDQUFDO0FBQ2hDLFFBUVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBcUIsQ0FBQztBQUN4RCxJQUFJLENBQUM7QUFDTCxJQVBhLElBQUksS0FBSyxDQUFDLE1BQWtCO0FBQ3hDLFFBQUssSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFELElBQUksQ0FBQztBQUNMLElBS0ksU0FBUyxDQUFDLE9BQXVCO0FBQ3BDLFFBQU8sSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQzVCLFFBQVEsSUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDeEYsWUFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsUUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUM5QixJQUFJLENBQUM7QUFDTCxJQUNJLFFBQVEsQ0FBQyxPQUF3QjtBQUFJLFFBQ25DLElBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVztBQUMxQixZQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEMsUUFBTSxJQUFHLElBQUksQ0FBQyxlQUFlLEVBQUM7QUFDOUIsWUFBVSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEUsU0FBTztBQUNQLFFBQVEsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsSUFBSSxDQUFDO0FBQUMsQ0FDTDs7Ozs7O29CQUFBO0FBdkJZO0FBQXFCLElBQTdCLEtBQUssRUFBRTtBQUFFO0FBQ0c7QUFHWixzREFGQTtBQVJRLHlCQUF5QiwwREFSckMsU0FBUyxDQUFDLFVBQ1AsUUFBUSxFQUFFLGtCQUFrQixyREFPNUIsMENBVWdDLFVBQVU7UUFoQjFDLFNBQVMsRUFBRSxDQUFDLHBCQWlCaEIsR0FYYSx5QkFBeUIsQ0E2QnJDO09BbENPLE9BQU8sRUFBRSxtQkFBbUIsa0JBQzVCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7O0NBQXlCLENBQUM7R0FDeEQsS0FBSyxFQUFFLElBQUksY0FDZCxDQUFDLE1BQ0wsQ0FBQzs7Ozs7Ozs7O29CQStCRjs7QUE1Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXZCQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBUkEsQUFBQSxBQVJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVdBLEFBQUEsQUFWQSxBQUFBLEFBNkJBLEFBN0JBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0LCBEaXJlY3RpdmUgLGZvcndhcmRSZWYsRWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7VmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sLCBOR19BU1lOQ19WQUxJREFUT1JTLEFzeW5jVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQge0ltYWdlQ29uZmlnfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJ1xyXG5pbXBvcnQgeyBBUFBfVkFMSURBVE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdC9hcHAtdmFsaWRhdG9ycy5jb25zdFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5jb25zdCBWQUxJREFUT1JfQ09ORklHID0gXCJ2YWxpZGF0b3JDb25maWdcIjtcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogXCJpbnB1dFt0eXBlPWZpbGVdXCIsXHJcbiAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfQVNZTkNfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlKSxcclxuICAgICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEltYWdlRmlsZUNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBBc3luY1ZhbGlkYXRvciAge1xyXG4gICAgZWxlbWVudDphbnlcclxuICAgIGlzUHJvY2Vzc2VkOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGltYWdlVmFsaWRhdGlvbjpGdW5jdGlvbjtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaW1hZ2UoY29uZmlnOkltYWdlQ29uZmlnKXtcclxuICAgICAgdGhpcy5pbWFnZVZhbGlkYXRpb24gPSBBUFBfVkFMSURBVE9SUy5pbWFnZShjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZil7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29uZmlnKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sKXtcclxuICAgICAgICBsZXQgaW1hZ2UgPSBcImltYWdlXCI7XHJcbiAgICAgICAgaWYoIXRoaXNbaW1hZ2VdICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR10gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVtpbWFnZV0pXHJcbiAgICAgICAgICB0aGlzW2ltYWdlXSA9IGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11baW1hZ2VdO1xyXG4gICAgICB0aGlzLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBQcm9taXNlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB8IE9ic2VydmFibGU8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+IHtcclxuICAgICAgaWYoIXRoaXMuaXNQcm9jZXNzZWQpXHJcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29udHJvbCk7XHJcbiAgICAgIGlmKHRoaXMuaW1hZ2VWYWxpZGF0aW9uKXtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlVmFsaWRhdGlvbihjb250cm9sLHRoaXMuZWxlbWVudC5maWxlcyk7XHJcbiAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9ICAgIFxyXG59XHJcbiJdfQ==