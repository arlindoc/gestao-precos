import * as tslib_1 from "tslib";
import { Directive, Input, ViewContainerRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let ControlHostDirective = class ControlHostDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    set portal(context) {
        if (context.templateRef) {
            if (this.view) {
                this.view.destroy();
                this.view = undefined;
            }
            this.view = this.viewContainerRef.createEmbeddedView(context.templateRef, context);
        }
    }
    ngOnDestroy() {
        if (this.view)
            this.view.destroy();
        if (this.viewContainerRef)
            this.viewContainerRef.clear();
    }
};
ControlHostDirective.ɵfac = function ControlHostDirective_Factory(t) { return new (t || ControlHostDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ControlHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ControlHostDirective, selectors: [["", "controlHost", ""]], inputs: { portal: ["controlHost", "portal"] } });
tslib_1.__decorate([
    Input('controlHost'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ControlHostDirective.prototype, "portal", null);
ControlHostDirective = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ViewContainerRef])
], ControlHostDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ControlHostDirective, [{
        type: Directive,
        args: [{
                selector: '[controlHost]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { portal: [{
            type: Input,
            args: ['controlHost']
        }] }); })();
export { ControlHostDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1ob3N0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9kaXJlY3RpdmVzL2NvbnRyb2wtaG9zdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBa0IsU0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBWSxNQUFNLGVBQWUsQ0FBQzs7QUFLN0YsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFBRyxJQUdoQyxZQUFtQixnQkFBa0M7QUFBSSxRQUF0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsSUFBRyxDQUFDO0FBQzlELElBQzBCLElBQUksTUFBTSxDQUFDLE9BQVk7QUFDakQsUUFBUSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7QUFDakMsWUFBWSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDM0IsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDcEMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQ3RDLGFBQWE7QUFDYixZQUFZLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDL0YsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBRyxJQUFJLENBQUMsSUFBSTtBQUNwQixZQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDOUIsUUFBUSxJQUFJLElBQUksQ0FBQyxnQkFBZ0I7QUFDakMsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUMsSUFBSSxDQUFDO0FBQ0wsQ0FBQzs7MEtBQUE7QUFoQnlCO0FBQXFCLElBQTFDLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFBRTtBQUNOO0FBRVYsa0RBS047QUFiUSxvQkFBb0IsNEJBSGhDLFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRSxlQUFlLE1BQzVCLENBQUMsekRBQ0UsMENBR3FDLGdCQUFnQjtBQUFHLEdBSC9DLG9CQUFvQixDQXFCaEM7Ozs7Ozs7OztvQkFDRDs7QUEzQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBYkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBcUJBLEFBckJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VtYmVkZGVkVmlld1JlZiwgRGlyZWN0aXZlLCBJbnB1dCwgVmlld0NvbnRhaW5lclJlZiwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbY29udHJvbEhvc3RdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29udHJvbEhvc3REaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgdmlldzogRW1iZWRkZWRWaWV3UmVmPGFueT47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHsgfVxyXG5cclxuICAgIEBJbnB1dCgnY29udHJvbEhvc3QnKSBzZXQgcG9ydGFsKGNvbnRleHQ6IGFueSkge1xyXG4gICAgICAgIGlmIChjb250ZXh0LnRlbXBsYXRlUmVmKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhjb250ZXh0LnRlbXBsYXRlUmVmLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYodGhpcy52aWV3KVxyXG4gICAgICAgICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcclxuICAgICAgICBpZiAodGhpcy52aWV3Q29udGFpbmVyUmVmKVxyXG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcclxuICAgIH1cclxufVxyXG4iXX0=