import * as tslib_1 from "tslib";
import { Injectable, Inject, LOCALE_ID } from "@angular/core";
import { getLocaleNumberSymbol, NumberSymbol } from "@angular/common";
import { DecimalPipe } from "@angular/common";
import { RegexValidator } from '../../util/regex-validator';
import { BLANK } from "../../const";
import { ReactiveFormConfig } from "../../util/reactive-form-config";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
let DecimalProvider = class DecimalProvider {
    constructor(decimalPipe, localeId) {
        this.decimalPipe = decimalPipe;
        this.localeId = localeId;
        this.decimalSeperator = ".";
        this.groupSeperator = ",";
        this.isSetConfig = false;
        this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);
        ;
        this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);
        this.setSymbolInConfig();
    }
    replacer(value) {
        value = String(value);
        if (!this.isSetConfig)
            this.bindConfig();
        value = value.split(this.groupSeperator).join(BLANK);
        if (this.allowDecimalSymbol)
            value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);
        var splitValue = value.split(this.decimalSeperator);
        value = (splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1])) ? splitValue[0] : value;
        return value;
    }
    transFormDecimal(value, digitsInfo) {
        value = String(value);
        if (!value) {
            return value;
        }
        return this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, "").replace(this.decimalSeperator, "."), digitsInfo, this.localeId);
    }
    setSymbolInConfig() {
        ReactiveFormConfig.number = { decimalSymbol: this.decimalSeperator, groupSymbol: this.groupSeperator };
    }
    bindConfig() {
        if (ReactiveFormConfig.json) {
            if (ReactiveFormConfig.json.localeId)
                this.localeId = ReactiveFormConfig.json.localeId;
            if (ReactiveFormConfig.json.allowDecimalSymbol)
                this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;
        }
        this.isSetConfig = true;
    }
};
DecimalProvider.ɵfac = function DecimalProvider_Factory(t) { return new (t || DecimalProvider)(ɵngcc0.ɵɵinject(ɵngcc1.DecimalPipe), ɵngcc0.ɵɵinject(LOCALE_ID)); };
DecimalProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DecimalProvider, factory: function (t) { return DecimalProvider.ɵfac(t); } });
DecimalProvider = tslib_1.__decorate([ tslib_1.__param(1, Inject(LOCALE_ID)),
    tslib_1.__metadata("design:paramtypes", [DecimalPipe, String])
], DecimalProvider);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DecimalProvider, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.DecimalPipe }, { type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
export { DecimalProvider };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,