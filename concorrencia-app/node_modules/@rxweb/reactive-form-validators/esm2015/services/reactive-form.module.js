import * as ɵngcc0 from '@angular/core';
var RxReactiveFormsModule_1, ReactiveTypedFormsModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from "@angular/core";
import { CommonModule, DecimalPipe } from "@angular/common";
import { FormsModule, ReactiveFormsModule, FormBuilder } from "@angular/forms";
import { RxFormBuilder } from "./rx-form-builder";
import { RxwebFormDirective } from "../directives/rx-form.directive";
import { DecimalProvider } from "../domain/element-processor/decimal.provider";
import { HtmlControlTemplateDirective } from '../directives/html-control-template.directive';
import { ControlHostDirective } from '../directives/control-host.directive';
import { RxFormControlDirective } from "../directives/template-validations/rxformcontrol.directive";
import { FileControlDirective } from "../directives/template-validations/file-control.directive";
import { ImageFileControlDirective } from "../directives/template-validations/image-file-control.directive";
import { AsyncValidationDirective } from "../directives/template-validations/async-validation.directive";
import { defaultContainer } from "../core/defaultContainer";
import { TypedFormBuilder } from "./typed-form-builder";
import { ReactiveFormConfig } from "../util/reactive-form-config";
let RxReactiveFormsModule = RxReactiveFormsModule_1 = class RxReactiveFormsModule {
    static forRoot() { return { ngModule: RxReactiveFormsModule_1, providers: [] }; }
};
RxReactiveFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: RxReactiveFormsModule });
RxReactiveFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function RxReactiveFormsModule_Factory(t) { return new (t || RxReactiveFormsModule)(); }, providers: [RxFormBuilder, DecimalProvider, DecimalPipe], imports: [[CommonModule, FormsModule, ReactiveFormsModule]] });
export { RxReactiveFormsModule };
// Experimental
let ReactiveTypedFormsModule = ReactiveTypedFormsModule_1 = class ReactiveTypedFormsModule {
    constructor() {
        defaultContainer.isExperimental = true;
        ReactiveFormConfig.autoInstancePush = true;
    }
    static forRoot() { return { ngModule: ReactiveTypedFormsModule_1, providers: [] }; }
};
ReactiveTypedFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ReactiveTypedFormsModule });
ReactiveTypedFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ReactiveTypedFormsModule_Factory(t) { return new (t || ReactiveTypedFormsModule)(); }, providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder], imports: [[CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()], ReactiveFormsModule, FormsModule, ReactiveFormsModule] });
ReactiveTypedFormsModule = ReactiveTypedFormsModule_1 = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [])
], ReactiveTypedFormsModule);
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RxReactiveFormsModule, { declarations: function () { return [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective]; }, imports: function () { return [CommonModule, FormsModule, ReactiveFormsModule]; }, exports: function () { return [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RxReactiveFormsModule, [{
        type: NgModule,
        args: [{
                declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],
                imports: [CommonModule, FormsModule, ReactiveFormsModule],
                providers: [RxFormBuilder, DecimalProvider, DecimalPipe],
                exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReactiveTypedFormsModule, { imports: function () { return [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule]; }, exports: function () { return [ReactiveFormsModule, FormsModule, ReactiveFormsModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReactiveTypedFormsModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()],
                providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder],
                exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]
            }]
    }], function () { return []; }, null); })();
export { ReactiveTypedFormsModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmUtZm9ybS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIkByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvc2VydmljZXMvcmVhY3RpdmUtZm9ybS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOENBQThDLENBQUE7QUFDOUUsT0FBTyxFQUFFLDRCQUE0QixFQUFDLE1BQU0sK0NBQStDLENBQUE7QUFDM0YsT0FBTyxFQUFFLG9CQUFvQixFQUFDLE1BQU0sc0NBQXNDLENBQUE7QUFDMUUsT0FBTyxFQUFDLHNCQUFzQixFQUFHLE1BQU0sNERBQTRELENBQUE7QUFDbkcsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sMkRBQTJELENBQUE7QUFDL0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUVBQWlFLENBQUE7QUFDM0csT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0RBQStELENBQUE7QUFDeEcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFPakUsSUFBYSxxQkFBcUIsNkJBQWxDLE1BQWEscUJBQXFCO0FBQ2xDLElBQUksTUFBTSxD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LEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUZBLEFBQUEsQUFOQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBRkEsQUFBQSxBQUlBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQU5BLEFBQUEsQUFOQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQU1BLEFBTkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCBEZWNpbWFsUGlwZSB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIlxyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybUJ1aWxkZXIgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgUnhGb3JtQnVpbGRlciB9IGZyb20gXCIuL3J4LWZvcm0tYnVpbGRlclwiO1xyXG5pbXBvcnQgeyBSeHdlYkZvcm1EaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGlyZWN0aXZlcy9yeC1mb3JtLmRpcmVjdGl2ZVwiO1xyXG5pbXBvcnQgeyBEZWNpbWFsUHJvdmlkZXIgfSBmcm9tIFwiLi4vZG9tYWluL2VsZW1lbnQtcHJvY2Vzc29yL2RlY2ltYWwucHJvdmlkZXJcIlxyXG5pbXBvcnQgeyBIdG1sQ29udHJvbFRlbXBsYXRlRGlyZWN0aXZlfSBmcm9tICcuLi9kaXJlY3RpdmVzL2h0bWwtY29udHJvbC10ZW1wbGF0ZS5kaXJlY3RpdmUnXHJcbmltcG9ydCB7IENvbnRyb2xIb3N0RGlyZWN0aXZlfSBmcm9tICcuLi9kaXJlY3RpdmVzL2NvbnRyb2wtaG9zdC5kaXJlY3RpdmUnXHJcbmltcG9ydCB7UnhGb3JtQ29udHJvbERpcmVjdGl2ZSAgfSBmcm9tIFwiLi4vZGlyZWN0aXZlcy90ZW1wbGF0ZS12YWxpZGF0aW9ucy9yeGZvcm1jb250cm9sLmRpcmVjdGl2ZVwiXHJcbmltcG9ydCB7RmlsZUNvbnRyb2xEaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGlyZWN0aXZlcy90ZW1wbGF0ZS12YWxpZGF0aW9ucy9maWxlLWNvbnRyb2wuZGlyZWN0aXZlXCJcclxuaW1wb3J0IHsgSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmVcIlxyXG5pbXBvcnQgeyBBc3luY1ZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGlyZWN0aXZlcy90ZW1wbGF0ZS12YWxpZGF0aW9ucy9hc3luYy12YWxpZGF0aW9uLmRpcmVjdGl2ZVwiXHJcbmltcG9ydCB7IGRlZmF1bHRDb250YWluZXIgfSBmcm9tIFwiLi4vY29yZS9kZWZhdWx0Q29udGFpbmVyXCI7XHJcbmltcG9ydCB7IFR5cGVkRm9ybUJ1aWxkZXIgfSBmcm9tIFwiLi90eXBlZC1mb3JtLWJ1aWxkZXJcIjtcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3JtQ29uZmlnIH0gZnJvbSBcIi4uL3V0aWwvcmVhY3RpdmUtZm9ybS1jb25maWdcIlxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbUnh3ZWJGb3JtRGlyZWN0aXZlLCBIdG1sQ29udHJvbFRlbXBsYXRlRGlyZWN0aXZlLCBDb250cm9sSG9zdERpcmVjdGl2ZSwgUnhGb3JtQ29udHJvbERpcmVjdGl2ZSwgRmlsZUNvbnRyb2xEaXJlY3RpdmUsIEltYWdlRmlsZUNvbnRyb2xEaXJlY3RpdmUsIEFzeW5jVmFsaWRhdGlvbkRpcmVjdGl2ZSAgXSxcclxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdLFxyXG4gICAgcHJvdmlkZXJzOiBbUnhGb3JtQnVpbGRlcixEZWNpbWFsUHJvdmlkZXIsIERlY2ltYWxQaXBlXSxcclxuICAgIGV4cG9ydHM6IFtBc3luY1ZhbGlkYXRpb25EaXJlY3RpdmUsUnh3ZWJGb3JtRGlyZWN0aXZlLEh0bWxDb250cm9sVGVtcGxhdGVEaXJlY3RpdmUsUnhGb3JtQ29udHJvbERpcmVjdGl2ZSxGaWxlQ29udHJvbERpcmVjdGl2ZSAsSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSeFJlYWN0aXZlRm9ybXNNb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxSeFJlYWN0aXZlRm9ybXNNb2R1bGU+IHsgcmV0dXJuIHsgbmdNb2R1bGU6IFJ4UmVhY3RpdmVGb3Jtc01vZHVsZSwgcHJvdmlkZXJzOiBbXSB9OyB9XHJcbn1cclxuXHJcbi8vIEV4cGVyaW1lbnRhbFxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXSxcclxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlLCBSeFJlYWN0aXZlRm9ybXNNb2R1bGUuZm9yUm9vdCgpXSxcclxuICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogRm9ybUJ1aWxkZXIsIHVzZUNsYXNzOiBUeXBlZEZvcm1CdWlsZGVyIH0sIFR5cGVkRm9ybUJ1aWxkZXJdLFxyXG4gICAgZXhwb3J0czogW1JlYWN0aXZlRm9ybXNNb2R1bGUsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVhY3RpdmVUeXBlZEZvcm1zTW9kdWxlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGRlZmF1bHRDb250YWluZXIuaXNFeHBlcmltZW50YWwgPSB0cnVlO1xyXG4gICAgICAgIFJlYWN0aXZlRm9ybUNvbmZpZy5hdXRvSW5zdGFuY2VQdXNoID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UmVhY3RpdmVUeXBlZEZvcm1zTW9kdWxlPiB7IHJldHVybiB7IG5nTW9kdWxlOiBSZWFjdGl2ZVR5cGVkRm9ybXNNb2R1bGUsIHByb3ZpZGVyczogW10gfTsgfVxyXG59XHJcbiJdfQ==